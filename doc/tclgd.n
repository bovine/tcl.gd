.TH tclgd n 1.1 "Tcl-Extensions"
.HS tclgd tcl
.BS
.SH NAME
tclgd \- modern, nearly feature-complete interface to gd-2 graphics drawing routines
.SH SYNOPSIS
\fBpackage require tclgd\fR
.PP
\fBGD create\fI objName width height\fR
.br
\fBGD create_truecolor\fI objName width height\fR 
.br
\fBGD create_from_jpeg\fI objName channel\fR
.br
\fBGD create_from_jpeg_data\fI objName data\fR
.br
\fBGD create_from_png\fI objName channel\fR
.br
\fBGD create_from_png_data\fI objName data\fR
.br
\fBGD create_from_gif\fI objName channel\fR
.br
\fBGD create_from_gif_data\fI objName data\fR
.br
\fBGD create_from_gd\fI objName channel\fR
.br
\fBGD create_from_gd_data\fI objName data\fR
.br
\fBGD create_from_gd2\fI objName channel\fR
.br
\fBGD create_from_gd2_data\fI objName data\fR
.br
\fBGD create_from_gd2_part\fI objName channel x y width height\fR
.br
\fBGD create_from_gd2_part_data\fI objName data x y width height\fR
.br
\fBGD create_from_wbmp\fI objName channel\fR
.br
\fBGD create_from_wbmp_data\fI objName data\fR
.br
\fBGD create_from_xbm\fI objName fileHandle\fR
.br
\fBGD create_from_xpm\fI objName fileHandle\fR
.PP
\fIobjName \fBpixel\fI x y ?color?\fR
.br
\fIobjName \fBpixelrgb\fI x y ?color?\fR
.br
\fIobjName \fBline\fI x1 y1 x2 y2 color\fR
.br
\fIobjName \fBpolygon\fI ?filled|open? pointList color\fR
.br
\fIobjName \fBrectangle\fI x1 y1 x2 y2 color\fR
.br
\fIobjName \fBfilled_rectangle\fI x1 y1 x2 y2 color\fR
.br
\fIobjName \fBarc\fI cx cy width height startDegrees endDegrees color\fR
.br
\fIobjName \fBfilled_arc\fI cx cy width height startDegrees endDegrees color ?arc? ?chord? ?pie? ?nofill? ?edged?\fR
.br
\fIobjName \fBfilled_ellipse\fI cx cy width height color\fR
.br
\fIobjName \fBfill_to_border\fI x y borderColor color\fR
.br
\fIobjName \fBfill\fI x y color\fR
.br
\fIobjName \fBtext\fI color font pointSize angle x y text\fR
.br
\fIobjName \fBtext_bounds\fI color font pointSize angle x y text\fR
.br
\fIobjName \fBallocate_color\fI r g b ?alpha?\fR
.br
\fIobjName \fBclosest_color\fI r g b ?alpha?\fR
.br
\fIobjName \fBclosest_color_hwb\fI r g b\fR
.br
\fIobjName \fBexact_color\fI r g b ?alpha?\fR
.br
\fIobjName \fBresolve_color\fI r g b ?alpha?\fR
.br
\fIobjName \fBtotal_colors\fR
.br
\fIobjName \fBdeallocate_color\fI color\fR
.br
\fIobjName \fBtrue_color\fI r g b ?alpha?\fR
.br
\fIobjName \fBinterlace\fI ?boolean?\fR
.br
\fIobjName \fBtransparent\fI ?color?\fR
.br
\fIobjName \fBset_anti_aliased\fI color\fR
.br
\fIobjName \fBset_anti_aliased_dont_blend\fI color\fR
.br
\fIobjName \fBset_brush\fI brushImageCommand\fR
.br
\fIobjName \fBset_tile\fI tileImageCommand\fR
.br
\fIobjName \fBset_style\fI colorList\fR
.br
\fIobjName \fBset_thickness\fI thickness\fR
.br
\fIobjName \fBalpha_blending\fI blending\fR
.br
\fIobjName \fBsave_alpha\fI boolean\fR
.br
\fIobjName \fBget_alpha colorIndex\fR
.br
\fIobjName \fBclip \fI?x1 y1 x2 y2?\fR
.br
\fIobjName \fBbounds_safe\fI x y\fR
.br
\fIobjName \fBgreen_component\fI color\fR
.br
\fIobjName \fBred_component\fI color\fR
.br
\fIobjName \fBblue_component\fI color\fR
.br
\fIobjName \fBrgb_components\fI color\fR
.br
\fIobjName \fBwidth\fR
.br
\fIobjName \fBheight\fR
.br
\fIobjName \fBcopy\fI srcImageCommand destX destY srcX srcY width height\fR
.br
\fIobjName \fBcopy_resized\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight\fR
.br
\fIobjName \fBcopy_resampled\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight\fR
.br
\fIobjName \fBcopy_rotated\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight angle\fR
.br
\fIobjName \fBcopy_merge\fI srcImageCommand destX destY srcX srcY width height percent\fR
.br
\fIobjName \fBcopy_merge_grey\fI srcImageCommand destX destY srcX srcY width height percent\fR
.br
\fIobjName \fBcopy_palette\fI srcImageCommand\fR
.br
\fIobjName \fBsharpen\fI percent\fR
.br
\fIobjName \fBcompare \fIotherImageCommand\fR
.br
\fIobjName \fBcompare_ratio \fIotherImageCommand\fR
.br
\fIobjName \fBsquare_to_circle\fI name radius\fR
.br
\fIobjName \fBrewrite_color\fI oldColor newColor\fR
.br
\fIobjName \fBwrite_jpeg\fI channel quality\fR
.br
\fIobjName \fBjpeg_data\fI quality\fR
.br
\fIobjName \fBwrite_gif\fI channel\fR
.br
\fIobjName \fBgif_data\fR
.br
\fIobjName \fBgif_anim_begin\fI channel global_color_map loops\fR
.br
\fIobjName \fBgif_anim_add \fIchannel local_color_map left_offset top_offset delay disposal ?previous_image?\fR
.br
\fIobjName \fBgif_anim_end \fIchannel\fR
.br
\fIobjName \fBwrite_png\fI channel compressionLevel\fR
.br
\fIobjName \fBpng_data\fI compressionLevel\fR
.br
\fIobjName \fBwrite_wbmp\fI channel fgcolor\fR
.br
\fIobjName \fBwbmp_data\fI fgcolor\fR
.br
\fIobjName \fBwrite_gd\fI fileHandle\fR
.br
\fIobjName \fBgd_data\fR
.br
\fIobjName \fBwrite_gd2\fI channel chunkSize format\fR
.br
\fIobjName \fBgd2_data\fI chunkSize format\fR
.br
.SH DESCRIPTION
tclgd gives Tcl programs the ability to read, manipulate, and generate
graphic images in a number of popular formats.
.PP
The \fBGD\fR command creates a new Tcl command, either prepping it with
an empty graphic for the case of \fBcreate\fR and \fBcreate_truecolor\fR,
or by reading file data either from a Tcl \fIchannel\fR, from in-memory
data, or from a Tcl file handle (in a couple of cases where a channel 
interface can't be provided due to limitations of the underlying gd library 
routines).
.PP
IMPORTANT: The channel being read should be configured for binary translation
using something like
.nf
    set fp [open parrots.png]
    fconfigure $fp -translation binary -encoding binary
    GD create_from_png parrots $fp
.ad
.PP
If you get corrupt image errors on images that you feel pretty sure are OK, 
like you can load them into Photoshop, you probably are not setting
translation to binary.
.PP
For formats where channels are support (the majority), any type of channel
can be used, including files, sockets, and, if so equipped, alternate
channel interfaces such as reading the data directly from zip files.
.PP
Once an image has been created or loaded, it can be manipulated via the
named object, or if the object name is \fB#auto\fR, a unique command name
is returned and should be grabbed into a variable and executed using a
reference to that variable, in the same manner as Incr Tcl.
.PP
.nf
    GD create img 100 100
    img pixel 5 5
.fo
.PP
.SH DRAWING FUNCTIONS
.PP
\fIobjName \fBpixel \fIx y\fR returns the color index of the pixel located at
coordinates x and y, while \fIobjName \fBpixel \fIx y color\fR sets that pixel
location to the specified color index.
.PP
\fIobjName \fBpixelrgb \fIx y\fR returns a list containing the red, green
and blue values of the pixel located at
coordinates x and y, while \fIobjName \fBpixelrgb \fIx y color\fR sets that pixel
location to the specified color index.  For setting, use \fBpixel\fR
instead as how or whether \fBpixelrgb\fR will set colors is likely to change.
.PP
\fIobjName \fBline\fI x1 y1 x2 y2 color\fR draws a line from the coordinates
\fIx1, y1\fR to \fIx2, y2\fR using color \fIcolor\fR.  If thickness is set
to 1 and antialiasing is enabled, the line will be drawn antialiased.
.PP
\fIobjName \fBpolygon\fI ?filled|open? pointList color\fR draws a polygon
of color \fIcolor\fR using points from the point list \fIpointList\fR
which must contain an even number of xy pairs.
.PP
\fIobjName \fBrectangle\fI x1 y1 x2 y2 color\fR draws a rectangle of the given
color from the corner at x1, y2 to the corner at x2, y2.
.PP
\fIobjName \fBfilled_rectangle\fI x1 y1 x2 y2 color\fR same as rectangle except
the rectangle is filled.
.PP
\fIobjName \fBarc\fI cx cy width height startDegrees endDegrees color\fR draws
an arc centered on cx, cy, of the specified width and heigtht, starting
and ending at the specified degrees, and using the specified color.
.PP
\fIobjName \fBfilled_arc\fI cx cy width height startDegrees endDegrees color ?arc? ?chord? ?pie? ?nofill? ?edged?\fR draws
an arc centered on cx, cy, of the specified width and heigtht, starting
and ending at the specified degrees, and using the specified color.  Additional
options can be specified and are logically or'ed together,
\fBchord\fR, \fBpie\fR, \fBnofill\fR and/or \fBedged\fR.
.PP
\fIobjName \fBfilled_ellipse\fI cx cy width height color\fR draws a filled
ellipse centered at cx, cy, of the given width, height and color.
.PP
\fIobjName \fBfill_to_border\fI x y borderColor color\fR fills to the border
matching the specified borderColor, starting at x, y, using the specified
color.
.PP
\fIobjName \fBfill\fI x y color\fR does a flood fill starting at x, y using
the specified color.
.PP
\fIobjName \fBtext\fI color font pointSize angle x y text\fR renders text
using the specified font and point size, at the specified angle, starting
at x, y.
\fBFont\fR is the full or relative pathname to a TrueType font 
file (.ttf or .ttc file).  (\fBTclgd\fR does not support GD's optionally
built-in, non-antialiased, non-TrueType fonts.)
.PP
\fIobjName \fBtext_bounds\fI color font pointSize angle x y text\fRdetermines the
bounds of text given the specified font and point size, at the specified angle,
starting at x, y.  The bounds are returned as an 8-element list giving the
x and y coordinates of the four corners of a box the text will be within.
.PP
\fIobjName \fBallocate_color\fI r g b ?alpha?\fR allocates a color given the
specified red, green and blue values, and optional alpha value, and returns
the color index.  For truecolor images it returns a value that can be used
to draw the specified color, but it's not really an index per se.
.PP
\fIobjName \fBclosest_color\fI r g b ?alpha?\fR returns the closest color index
that can be found among the currently allocated colors.
.PP
\fIobjName \fBclosest_color_hwb\fI r g b\fR returns the closest color
based on hue, whiteness and blackness and is superior to \fBclosest_color\fR.
.PP
\fIobjName \fBexact_color\fI r g b ?alpha?\fR searches the colors which have
been defined thus far in the specified image and returns the index of the
first color with RGB values which exactly match those of the request.
.PP
If no allocated color matches the request precisely, -1 is returned.
.PP
\fIobjName \fBresolve_color\fI r g b ?alpha?\fR searches the colors which have
been defined thus far in the specified image object and returns the index of 
the first color with RGB values which exactly match those of the request.
If no allocated color matches the request precisely, it tries to allocate the 
exact color.  If there is no space left in the color table then it
returns the index of the closest color.
.PP
If applied to a truecolor image, this method always succeeds in returning the
requested color.  If the \fIalpha\fR argument is specified, then the
index of the first color with matching RGBA values is returned, etc, as
above.
.PP
\fIobjName \fBtotal_colors\fR returns the number of colors currently allocated
in a palette image.
.PP
\fIobjName \fBdeallocate_color\fI color\fR marks the specified color as being
available for reuse.
.PP
\fIobjName \fBtrue_color\fI r g b ?alpha?\fR returns an RGB or RGBA color value
for use when drawing on a truecolor image.  If \fIalpha\fR is specified then
alpha channel transarency is used.
.PP
Red, green and blue are all in the range between 0, off, and 255, maximum.
Alpha ranges between 0, opaque, and 127 (fully transparent).
.PP
\fIobjName \fBinterlace\fI ?boolean?\fR if set to 1, t, etc, causes the image
to be saved interlaced if the output format supports it, if 0, f, etc, causes
the image to be saved noninterlaced.  If boolean isn't specified, returns
the current interlace setting for the image.
.PP
\fIobjName \fBtransparent\fI color\fR says what color index will be generated as
transparent when the image is saved, assuming the outputted image format 
supports it.  If \fIcolor\fR is not specified, the current color is returned.
\fB-1\fR means transparency is disabled; setting transparency to -1 disables it
as well.
.PP
\fIobjName \fBset_anti_aliased\fI color\fR is used to specify the foreground
color to be used when drawing antialiased lines.
.PP
Antialiased lines can be drawn on both truecolor and palette-based images.
However, attempts to draw antialiased lines on highly complex palette-based
backgrounds may not give satisfactory results due to the limited number of
colors available in the palette.  Antialiased line-drawing on simple
backgrounds should work well with palette-based images.  Otherwise, please
use a truecolor image instead.
.PP
\fIobjName \fBset_anti_aliased_dont_blend\fI color\fR - Normally when drawing
lines with the special antialiased color, blending colors with the background
to reduce jagged edges is the desired behavior.  Sometimes, though, one
desires that lines not be blended with one particular color when it is 
encountered int he background, this method can be used to indicate the
special color that the foreground sould stand out more clearly against.
.PP
\fIobjName \fBset_brush\fI brushImageCommand\fR - set the brush for brushed 
drawing to be the image contained in the specified image command.
.PP
\fIobjName \fBset_tile\fI tileImageCommand\fR - set the tile for tiled drawing
to be the image contained in the specified image command.
.PP
\fIobjName \fBset_style\fI colorList\fR - set the image style for styled lines to a
list of colors.  Each color in the list is either a color value or the
word \fItransparent\fR
to indicate that the existing color should be left unchanged for that 
particular pixel, allowing lines to be drawn with dashed lines, etc, when
the color argument to the line drawing function is specified as \fIstyled\fR.
.PP
Styles and brushes can be combined to draw the brush image at intervals
instead of with a continuous stroke.  When creating a style list for use with
a brush, list elements of zero indicate pixels at which the brush should not 
be drawn and elements of one indicates pixels at which the brush should be 
drawn.
.PP
To draw a styled, brushed line, use the special color \fIstyled_brushed\fR for
the color argument to the \fBdraw\fR method..
.PP
\fIobjName \fBset_thickness\fI thickness\fR - set the thickness of lines drawn
by the line and polygon drawing functions.
.PP
\fIobjName \fBalpha_blending\fI blending\fR - GD has two different modes for
drawing on truecolor images.  In blending mode, which is on by default,
the alpha channel component of the color supplied to each drawing function
is used to determine how much of the underlying color should be allowed to
shine through.  In this mode gd automatically blends the existing color at
that point with the drawing color, storing the result in the image.  In this
mode, the resulting pixel is opaque (alpha channel value of zero.)
.PP
In non-blending mode, the drawing color is copied literally with its alpha
channel information, replacing the destination pixel with the color and
alpha channel value.  In this mode the alpha value stored in the image is
whatever alpha value the pixel was drawn with, hence the resulting pixel in
the resulting image will range from opaque to translucent depending on the
alpha channel value.
.PP
Blending mode is only available with truecolor images and PNG is currently the
only file format supported by gd which can include alpha channel information.
.PP
\fIobjName \fBsave_alpha\fI boolean\fR - by default gd does not attempt to save
full alpha channel information (as opposed to single-color transparency)
when saving PNG images.  (PNG is currently the only gd-supported file format
that can include alpha channel information.)  This saves space in the output
file.
.PP
If you want to create an image with a full alpha (transparency) channel, invoke
the \fBsave_alpha\fR method with an argument of 1 and also invoke the
\fBalpha_blending\fR method with an argument of 0 to turn off alpa
blending within the library, causing the alpha channel information to be stored
in the image rather than having gd composite the image immediately when
the drawing functions are invoked.
.PP
\fIobjName \fBget_alpha\fI color\fR - returns the alpha component of the specified
color index, 
where 0 is completely opaque (no blending with the background) through 127
being completely transparent (the background shines through 100%).
.PP
\fIobjName \fBclip\fI ?x1 y1 x2 y2?\fR - with no arguments, returns the boundaries of the current clipping rectangle.  With arguments, sets a clipping rectangle.  Once set, all future drawing operations will remain within the specified clipping area, until a new clipping rectangle is set.
.PP
\fIobjName \fBbounds_safe\fI x y\fR returns true (1) if the specified point is
within the current clipping rectangle, and false (0) if not.  
.PP
\fIobjName \fBgreen_component\fI color\fR - returns the green component of the
specific color index.
.PP
\fIobjName \fBred_component\fI color\fR - returns the red component of the
specified colofr index.
.PP
\fIobjName \fBblue_component\fI color\fR - returns the blue component of the
specified colofr index.
.PP
\fIobjName \fBrgb_components\fI color\fR - returns the red, green and blue
components of the color as a list.
.PP
\fIobjName \fBwidth\fB return the width of the image, while
\fIobjName \fBheight\fR returns the height.
.PP
\fIobjName \fBcompare \fIotherImageCommand\fR - given two images (the named object
and another image command), return a list of ways in which the two images
are different.
.PP
The members of the list will include zero or more of the following elements:
\fBimage\fR, if present, indicates that the images will appear differently
when displayed.  \fBnum_colors\fR, if present, indicates that the number of
colors in the palettes differ, while \fBcolors\fR indicates that the colors
differ between the two images.  \fBheight\fR, if present, indicates that the
height of the images differ, while \fBwidth\fR, if present, indicates that
the width of the images differs.
.PP
\fBtransparent\fR, if present, indicates that the transparent color differs,
while \fBbackground\fR indicates that the background color differs.
\fBinterlace\fR, if present, indicates that one image is interlaced while the
other is not, and \fBtruecolor\fR, if present, indicates that one image is
a truecolor while the other is indexed and has a palette.
.PP
If the list returned is empty, the images should be identical.  If \fBimage\fR
is not present, the images will appear identically if displayed, regardless
of other characteristics differing.  According to the libgd documentation,
any difference in the transparent color is assumed to make images display
differently, even if the transparent color is not used.
.PP
\fIobjName \fBcompare_ratio \fIotherImageCommand\fR - given two images of identical dimensions, returns the ratio of pixels that are identical between the two images, between 0.0 and 1.0.
.PP
\fIobjName \fBcopy\fI srcImageCommand destX destY srcX srcY width height\fR - copy 
a rectangular portion of one image to another image.  If you want to stretch or shrink the image in the process, use \fBcopy_resized\fR or \fBcopy_resampled\fR.
.PP
\fIobjName \fBcopy_resized\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight\fR - used to copy a rectangular portion of one image to another image.  The X and Y dimensions of the source and destination regions can vary, resulting in stretching or shrinking of the region as appropriate.
.PP
\fIobjName \fBcopy_resampled\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight\fR - This command provides "smooth" copying from
a large image to a smaller one using a weighted average of the pixels of
the source area rather than selecting one representative pixel.
.PP
\fIobjName \fBcopy_rotated\fI srcImageCommand destX destY srcX srcY destWidth destHeight srcWidth srcHeight angle\fR
.PP
\fIobjName \fBcopy_merge\fI srcImageCommand destX destY srcX srcY width height percent\fR - merge two images by the specified percentage.  If the percentage is 100 then it will function the same as the \fBcopy\fR method.
.PP
\fIobjName \fBcopy_merge_grey\fI srcImageCommand destX destY srcX srcY width height percent\fR
.PP
\fIobjName \fBcopy_palette\fI srcImageCommand\fR - copies a palette from one 
image to another, attempting to match the colors in the target image to
the colors in the source palette.
.PP
\fIobjName \fBsharpen\fI percent\fR - sharpen the specified image.  Argument
is the sharpening percentage and can be greater than 100.  Silently does
nothing to non-truecolor images.  Silently does nothing for 0 percent.
Transparency and alpha channel are not altered.
.PP
\fIobjName \fBsquare_to_circle\fI name radius\fR - creates a new image of
the width and height radius * 2, in which the X axis of the original has
been remapped to rho, the distance from the center.  This is known as
a polar coordinate transform.  The source image must be square.
.PP
\fIobjName \fBrewrite_color\fI oldColor newColor\fR - converts all pixels
with a color of \fIoldColor\fR to a color of \fInewColor\fR and returns
a count of the number of pixels changed.
.PP
.SH IMAGE OUTPUT ROUTINES
\fIobjName \fBwrite_jpeg\fI channel quality\fR writes the image in JPEG format,
with the specified quality level,
to the specified Tcl channel, while \fIobjName \fBjpeg_data\fI quality\fR
will return it as binary data.  Quality can range from \fB0\fR to \fB100\fR,
where higher numbers give higher quality.
.PP
\fIobjName \fBwrite_gif\fI channel\fR writes the image to the specified
channel in GIF format, while \fIobjName \fBgif_data\fR returns it as binary
data.
.PP
\fIobjName \fBwrite_png\fI channel compressionLevel\fR write the image to
the specified channel, with the compression level of \fB-1\fR for the
default set when zlib was built, \fB0\fR to indicate no compression,
\fB1\fR to compress as quickly as possible, all the way to \fB9\fR to select 
the best possible compression.  
Likewise \fIobjName \fBpng_data\fI compressionLevel\fR
returns the image as binary data, with the specified compression.
.PP
\fIobjName \fBwrite_wbmp\fI channel fgcolor\fR write the image to the specified
channel in Windows bitmap format, selecting only pixels matching the specified
foreground color.  \fIobjName \fBwbmp_data\fI fgcolor\fR returns the image
in wbmp format as binary data.
.PP
\fIobjName \fBwrite_gd\fI fileHandle\fR writes the image out in the 
high-performance but non-portable \fIgd\fR format, while
\fIobjName \fBgd_data\fR returns the image as binary data.
.PP
\fIobjName \fBwrite_gd2\fI channel chunkSize format\fR
.PP
\fIobjName \fBgd2_data\fI chunkSize format\fR writes the image out in the
high-performance but non-portable \fIgd2\fR format, with \fIchunkSize\fR
determining the size of each chunk, and format being either \fBcompressed\fR
or \fBraw\fR.
.PP
.SH ANIMATED GIFS
\fIobjName \fBgif_anim_begin\fI channel global_color_map loops\fR begins an 
animated GIF by specifying the file channel to be written to, a \fB1\fR if the global color map is to be used, and the number of times to play the animation.
If \fIloops\fR is zero, the animation will repeat indefinitely.
.PP
\fIobjName \fBgif_anim_add \fIchannel local_color_map left_offset top_offset 
delay disposal ?previous_image?\fR adds a GIF image to an animated GIF that 
is under construction.  Set \fIlocal_color_map\fR to 1 to add a local palette for this image to the animation, else the global palette is used.
.br
If you use local palettes, you must make sure they match the global palette;
use the \fIcopy_palette\fR method to copy palettes between images.
.br
\fIleft_offset\fR and \fItop_offset\fR let you place the frame with an offset into the parent frame, where (0, 0) puts it in the corner.
.br
Delay specifies the delay between the previous frame and this frame in hundredths of a second.  Disposal can be 0 for unknown, 1 for none, 2 for restore background, or 3 for restore previous.  Unknown is not recommended.  Restore background restores the first allocated color of the global palette.  Restore previous restores the appearance of the affected area before teh frame was rendered.  Only /fBnone\fR is a sensible choice for the first frame.
.br
If the previous image is passed, the built-in GIF optimizer is automatically engaged and the disposal method specified is ignored.  The optimizer comapres the images and only writes the changed pixels to the new frame of the animation. To achieve good optimization, it is usually best to use a single global color map. To allow \fIgif_anim|add\fR to compress unchanged pixels via the use of a transparent color, the image must include a transparent color. 
See \fBgd\fR documentation for details.
.br
\fIobjName \fBgif_anim_end \fIchannel\fR is self-explanatory.
.PP
